{"version":3,"sources":["apis/jsonPlaceholder.js","components/UserHeader.js","actions/index.js","components/PostList.js","components/App.js","reducers/postsReducer.js","reducers/usersReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","UserHeader","this","props","fetchUser","userId","user","className","name","React","Component","connect","state","ownProps","users","find","id","dispatch","a","jsonPlaceholder","get","response","type","payload","data","PostList","fetchPosts","posts","map","post","title","body","renderList","App","postsReducer","action","usersReducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"6NAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yC,OCCLC,E,uKACJ,WACEC,KAAKC,MAAMC,UAAUF,KAAKC,MAAME,U,oBAGlC,WACE,IAAQC,EAASJ,KAAKC,MAAdG,KAER,OAAKA,EAIE,qBAAKC,UAAU,SAAf,SAAyBD,EAAKE,OAH5B,S,GATYC,IAAMC,WAqBhBC,eALS,SAACC,EAAOC,GAC9B,MAAO,CAAEP,KAAMM,EAAME,MAAMC,MAAK,SAACT,GAAD,OAAUA,EAAKU,KAAOH,EAASR,aAIzB,CAAED,UCXjB,SAACY,GAAD,8CAAQ,WAAOC,GAAP,eAAAC,EAAA,sEAERC,EAAgBC,IAAhB,iBAA8BJ,IAFtB,OAEzBK,EAFyB,OAI/BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAJlB,2CAAR,wDDWVb,CAAwCV,GEpBjDwB,E,uKACJ,WACEvB,KAAKC,MAAMuB,e,wBAGb,WACE,OAAOxB,KAAKC,MAAMwB,MAAMC,KAAI,SAACC,GAC3B,OACE,sBAAKtB,UAAU,OAAf,UACE,mBAAGA,UAAU,mCACb,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6BAAKsB,EAAKC,QACV,4BAAID,EAAKE,UAEX,cAAC,EAAD,CAAY1B,OAAQwB,EAAKxB,cAPFwB,EAAKb,S,oBAetC,WAEE,OAAO,qBAAKT,UAAU,0BAAf,SAA0CL,KAAK8B,mB,GAzBnCvB,IAAMC,WAiCdC,eAJS,SAACC,GACvB,MAAO,CAAEe,MAAOf,EAAMe,SAGgB,CAAED,WDpChB,yDAAM,WAAOT,GAAP,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAHpB,2CAAN,wDCoCXb,CAAyCc,GC3BzCQ,EARH,WACV,OACE,qBAAK1B,UAAU,eAAf,SACE,cAAC,EAAD,OCUS2B,EAhBM,WAAyB,IAAxBtB,EAAuB,uDAAf,GAAIuB,EAAW,uCAQ3C,MACO,gBADCA,EAAOb,KAEJa,EAAOZ,QAEPX,G,QCHEwB,EATM,WAAyB,IAAxBxB,EAAuB,uDAAf,GAAIuB,EAAW,uCAC3C,MACO,eADCA,EAAOb,KAEL,GAAN,mBAAWV,GAAX,CAAkBuB,EAAOZ,UAElBX,GCDEyB,cAAgB,CAG7BV,MAAOO,EACPpB,MAAOsB,ICOT,IAAME,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,cAAc,Y","file":"static/js/main.b573aeb2.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\n\nclass UserHeader extends React.Component {\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  }\n\n  render() {\n    const { user } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return <div className='header'>{user.name}</div>;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { user: state.users.find((user) => user.id === ownProps.userId) };\n  //find and return the first element of the array that passes the callback test\n};\n\nexport default connect(mapStateToProps, { fetchUser })(UserHeader);\n","import jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const fetchPosts = () => async (dispatch) => {\n  const response = await jsonPlaceholder.get('/posts');\n\n  dispatch({ type: 'FETCH_POSTS', payload: response.data });\n};\n\n//our action creator fetchPosts will return an action (object) of type 'FETCH_POSTS'\n//dispatch function - unlimited power to initiate changes to the data on the redux side of our app\n//getState function - can be called on a redux store and that will return all of the data or all the state inside of our redux store so that we can read or access it\n//dispatch & getState - unlimited power over everything that goes on inside of our redux application\n//we're not using getState here, just dispatch as argument\n\nexport const fetchUser = (id) => async (dispatch) => {\n  //const response = await jsonPlaceholder.get('/users/' + id);\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n\n  dispatch({ type: 'FETCH_USER', payload: response.data });\n};\n\n//above format - a function that returns a function\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions';\nimport UserHeader from './UserHeader';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  renderList() {\n    return this.props.posts.map((post) => {\n      return (\n        <div className='item' key={post.id}>\n          <i className='large middle aligned icon user' />\n          <div className='content'>\n            <div className='description'>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </div>\n            <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      );\n    });\n  }\n  //we put renderList outside of our render function to make our code more readable and easier to maintain\n\n  render() {\n    //console.log(this.props.posts);\n    return <div className='ui relaxed divided list'>{this.renderList()}</div>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { posts: state.posts };\n};\n\nexport default connect(mapStateToProps, { fetchPosts })(PostList);\n//null indicates that we don't have any state that we want to pass in this component (PostList)\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className='ui container'>\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","const postsReducer = (state = [], action) => {\n  /* if ((action.type = 'FETCH_POSTS')) {\n    return action.payload;\n  }\n\n  return state; */\n\n  //switch statement:\n  switch (action.type) {\n    case 'FETCH_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","const usersReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n  //create a dummy reducer to trick redux into thinking that it has one:\n  //replaceMe: () => 'hi there',\n  posts: postsReducer,\n  users: usersReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\n//fix for CRA not reloading in browser on save:\nif (module.hot) {\n  module.hot.accept();\n}\n//\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}