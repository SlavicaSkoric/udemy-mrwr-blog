{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/postsReducer.js","reducers/usersReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","title","body","renderList","getState","_","chain","uniq","forEach","value","App","postsReducer","action","usersReducer","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"8OAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCiBEC,EAAa,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAHpB,2CAAN,uDAYbC,EAAY,SAACC,GAAD,8CAAQ,WAAOT,GAAP,eAAAC,EAAA,sEACRC,EAAgBC,IAAhB,iBAA8BM,IADtB,OACzBL,EADyB,OAG/BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAHlB,2CAAR,uD,OC5BnBG,E,4JAKJ,WACE,IAAQC,EAASC,KAAKC,MAAdF,KAER,OAAKA,EAIE,qBAAKG,UAAU,SAAf,SAAyBH,EAAKI,OAH5B,S,GATYC,IAAMC,WAqBhBC,eALS,SAACC,EAAOC,GAC9B,MAAO,CAAET,KAAMQ,EAAME,MAAMC,MAAK,SAACX,GAAD,OAAUA,EAAKF,KAAOW,EAASG,aAIlDL,CAA+CR,GCpBxDc,E,uKACJ,WACEZ,KAAKC,MAAMY,uB,wBAGb,WACE,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAACC,GAC3B,OACE,sBAAKd,UAAU,OAAf,UACE,mBAAGA,UAAU,mCACb,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6BAAKc,EAAKC,QACV,4BAAID,EAAKE,UAEX,cAAC,EAAD,CAAYP,OAAQK,EAAKL,cAPFK,EAAKnB,S,oBAetC,WAEE,OAAO,qBAAKK,UAAU,0BAAf,SAA0CF,KAAKmB,mB,GAzBnCf,IAAMC,WAiCdC,eAJS,SAACC,GACvB,MAAO,CAAEO,MAAOP,EAAMO,SAGgB,CAAED,mBFnCR,yDAAM,WAAOzB,EAAUgC,GAAjB,SAAA/B,EAAA,sEAEhCD,EAASD,KAFuB,OAQtCkC,IAAEC,MAAMF,IAAWN,OAChBC,IAAI,UACJQ,OACAC,SAAQ,SAAC3B,GAAD,OAAQT,EAASQ,EAAUC,OACnC4B,QAZmC,2CAAN,0DEmCnBnB,CAAiDM,GC3BjDc,EARH,WACV,OACE,qBAAKxB,UAAU,eAAf,SACE,cAAC,EAAD,OCUSyB,EAhBM,WAAyB,IAAxBpB,EAAuB,uDAAf,GAAIqB,EAAW,uCAQ3C,MACO,gBADCA,EAAOnC,KAEJmC,EAAOlC,QAEPa,G,QCHEsB,EATM,WAAyB,IAAxBtB,EAAuB,uDAAf,GAAIqB,EAAW,uCAC3C,MACO,eADCA,EAAOnC,KAEL,GAAN,mBAAWc,GAAX,CAAkBqB,EAAOlC,UAElBa,GCDEuB,cAAgB,CAG7BhB,MAAOa,EACPlB,MAAOoB,ICOT,IAAME,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,cAAc,Y","file":"static/js/main.adc57b58.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n","import _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  //console.log('about to fetch posts!');\n  await dispatch(fetchPosts());\n  /*   //console.log(getState().posts);\n  const userIds = _.uniq(_.map(getState().posts, 'userId'));\n  //console.log(userIds);\n  userIds.forEach((id) => dispatch(fetchUser(id))); */\n\n  _.chain(getState().posts)\n    .map('userId')\n    .uniq()\n    .forEach((id) => dispatch(fetchUser(id)))\n    .value();\n};\n//calling an action creator from an action creator\n//getState - the second argument, in addition to dispatch, that redux thunk calls, function that exists on the redux store that gives us access to all the data inside of redux\n\nexport const fetchPosts = () => async (dispatch) => {\n  const response = await jsonPlaceholder.get('/posts');\n\n  dispatch({ type: 'FETCH_POSTS', payload: response.data });\n};\n\n//our action creator fetchPosts will return an action (object) of type 'FETCH_POSTS'\n//dispatch function - unlimited power to initiate changes to the data on the redux side of our app\n//getState function - can be called on a redux store and that will return all of the data or all the state inside of our redux store so that we can read or access it\n//dispatch & getState - unlimited power over everything that goes on inside of our redux application\n//we're not using getState here, just dispatch as argument\n\nexport const fetchUser = (id) => async (dispatch) => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n\n  dispatch({ type: 'FETCH_USER', payload: response.data });\n};\n\n//memoized version:\n/* export const fetchUser = (id) => (dispatch) => _fetchUser(id, dispatch);\n//above format - a function that returns a function\nconst _fetchUser = _.memoize(async (id, dispatch) => {\n  //const response = await jsonPlaceholder.get('/users/' + id);\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n\n  dispatch({ type: 'FETCH_USER', payload: response.data });\n});\n//_fetchUser - _ - indicating a private variable, other engineers should not change it unless they really know what they are doing */\n","import React from 'react';\nimport { connect } from 'react-redux';\n//import { fetchUser } from '../actions';\n\nclass UserHeader extends React.Component {\n  /*   componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  } */\n\n  render() {\n    const { user } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return <div className='header'>{user.name}</div>;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { user: state.users.find((user) => user.id === ownProps.userId) };\n  //find and return the first element of the array that passes the callback test\n};\n\nexport default connect(mapStateToProps /* , { fetchUser } */)(UserHeader);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from './UserHeader';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPostsAndUsers();\n  }\n\n  renderList() {\n    return this.props.posts.map((post) => {\n      return (\n        <div className='item' key={post.id}>\n          <i className='large middle aligned icon user' />\n          <div className='content'>\n            <div className='description'>\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </div>\n            <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      );\n    });\n  }\n  //we put renderList outside of our render function to make our code more readable and easier to maintain\n\n  render() {\n    //console.log(this.props.posts);\n    return <div className='ui relaxed divided list'>{this.renderList()}</div>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { posts: state.posts };\n};\n\nexport default connect(mapStateToProps, { fetchPostsAndUsers })(PostList);\n//null indicates that we don't have any state that we want to pass in this component (PostList)\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className='ui container'>\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","const postsReducer = (state = [], action) => {\n  /* if ((action.type = 'FETCH_POSTS')) {\n    return action.payload;\n  }\n\n  return state; */\n\n  //switch statement:\n  switch (action.type) {\n    case 'FETCH_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","const usersReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default usersReducer;\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n  //create a dummy reducer to trick redux into thinking that it has one:\n  //replaceMe: () => 'hi there',\n  posts: postsReducer,\n  users: usersReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\n//fix for CRA not reloading in browser on save:\nif (module.hot) {\n  module.hot.accept();\n}\n//\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}