{"version":3,"sources":["apis/jsonPlaceholder.js","components/PostList.js","actions/index.js","components/App.js","reducers/postsReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","PostList","this","props","fetchPosts","React","Component","connect","state","posts","dispatch","a","jsonPlaceholder","get","response","type","payload","App","className","postsReducer","action","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"+NAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yC,OCCLC,E,uKACJ,WACEC,KAAKC,MAAMC,e,oBAGb,WACE,OAAO,gD,GANYC,IAAMC,WAcdC,eAJS,SAACC,GACvB,MAAO,CAAEC,MAAOD,EAAMC,SAGgB,CAAEL,WChBhB,yDAAM,WAAOM,GAAP,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAE9BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,IAFX,2CAAN,wDDgBXP,CAAyCN,GEPzCgB,EARH,WACV,OACE,qBAAKC,UAAU,eAAf,SACE,cAAC,EAAD,OCUSC,EAhBM,WAAyB,IAAxBX,EAAuB,uDAAf,GAAIY,EAAW,uCAQ3C,MACO,eADCA,EAAOL,KAEJK,EAAOJ,QAEPR,GCTEa,cAAgB,CAG7BZ,MAAOU,ICST,IAAMG,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,cAAc,Y","file":"static/js/main.6fd6a2f7.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  render() {\n    return <div>Post List</div>;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { posts: state.posts };\n};\n\nexport default connect(mapStateToProps, { fetchPosts })(PostList);\n//null indicates that we don't have any state that we want to pass in this component (PostList)\n","import jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const fetchPosts = () => async (dispatch) => {\n  const response = await jsonPlaceholder.get('/posts');\n  dispatch({ type: 'FETCH_POSTS', payload: response });\n};\n\n//our action creator fetchPosts will return an action (object) of type 'FETCH_POSTS'\n//dispatch function - unlimited power to initiate changes to the data on the redux side of our app\n//getState function - can be called on a redux store and that will return all of the data or all the state inside of our redux store so that we can read or access it\n//dispatch & getState - unlimited power over everything that goes on inside of our redux application\n//we're not using getState here, just dispatch as argument\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className='ui container'>\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","const postsReducer = (state = [], action) => {\n  /* if ((action.type = 'FETCH_POSTS')) {\n    return action.payload;\n  }\n\n  return state; */\n\n  //switch statement:\n  switch (action.type) {\n    case 'FETCH_POST':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\n\nexport default combineReducers({\n  //create a dummy reducer to trick redux into thinking that it has one:\n  //replaceMe: () => 'hi there',\n  posts: postsReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\n//fix for CRA not reloading in browser on save:\nif (module.hot) {\n  module.hot.accept();\n}\n//\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}